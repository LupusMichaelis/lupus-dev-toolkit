#!/bin/bash

set -euo pipefail
shopt -s lastpipe

. $LUPUSMICHAELIS_DIR/lib/library

lupusmichaelis-debug-handle

init-secure()
{
	lupusmichaelis-assert-environement-is-set MYSQL_SSL_PATH
	mkdir -p "$MYSQL_SSL_PATH"

	local -r ssl_ca_key="$MYSQL_SSL_PATH/ca-key.pem"
	local -r ssl_ca_cert="$MYSQL_SSL_PATH/ca-cert.pem"
	local -r ssl_server_key="$MYSQL_SSL_PATH/server-key.pem"
	local -r ssl_server_req="$MYSQL_SSL_PATH/server-req.pem"
	local -r ssl_server_cert="$MYSQL_SSL_PATH/server-cert.pem"

	# Based on https://www.cyberciti.biz/faq/how-to-setup-mariadb-ssl-and-secure-connections-from-clients/

	# Create the certificate's key
	openssl genrsa 4096 > "$ssl_ca_key"

	# Generate the CA certificate
	openssl \
		req \
			-new \
			-subj '/CN=lupusmic.org/O=None/C=FR' \
			-x509 \
			-nodes \
			-days 365 \
			-key "$ssl_ca_key" \
			-out "$ssl_ca_cert"

	# Generate server certificates
	openssl \
		req \
			-newkey rsa:4096 \
			-subj '/CN=lupusmic.org/O=None/C=FR' \
			-days 365 \
			-nodes \
			-keyout "$ssl_server_key" \
			-out "$ssl_server_req"

	# XXX why???
	openssl \
		rsa \
			-in "$ssl_server_key" \
			-out "$ssl_server_key"

	# Sign the server certificate with CA certificate
	openssl \
		x509 \
			-req \
			-in "$ssl_server_req" \
			-days 365 \
			-CA "$ssl_ca_cert" \
			-CAkey "$ssl_ca_key" \
			-set_serial 01 \
			-out "$ssl_server_cert"

	cat <<- eos > /etc/my.cnf.d/11-lupusmichaelis-secure.cnf
	[mysqld]

	ssl_ca=$ssl_ca_cert
	ssl_cert=$ssl_server_cert
	ssl_key=$ssl_server_key
	require_secure_transport=ON
	eos

	chown -R "$MYSQL_SYSUSER:$MYSQL_SYSGROUP" "$MYSQL_SSL_PATH"
}

does-require-secured()
{
	[[ -v LUPUSMICHAELIS_ALPINE_MARIADB_SECURE  && enable = "$LUPUSMICHAELIS_ALPINE_MARIADB_SECURE" ]]
}

init()
{
	if does-require-secured
	then
		init-secure
	fi

	local -r sql_tmp=$(mktemp)
	local -ar myargs=(
		--user="${MYSQL_SYSUSER}"
		--datadir="${MYSQL_DATA_PATH}"
	)

	mysql_install_db --skip-test-db ${myargs[@]} ||
		true # Let's ignore failing installation, we don't care at this point

	mysqld_safe --skip-networking ${myargs[@]} &
	local -r pid="$!"
	sleep 2 # Wait for daemon to start up

	mysql_upgrade ||
		true # it fails if database already upgraded

	{
		local schema
		local space
		if [ -d $INIT_DIR/schema ]
		then
			for schema in $(ls $INIT_DIR/schema/*.sql)
			do
				space=$(basename $schema .sql) # XXX Test not busybox
				echo "-- $schema --"
				echo "create database if not exists \`$space\`;"
				echo "use \`$space\`;"
				cat $schema
			done
            echo
		fi

		if [[ -v LUPUSMICHAELIS_DEV_USER_ALIAS && -n "$LUPUSMICHAELIS_DEV_USER_ALIAS" ]]
		then
			cat <<- SQL
			create user if not exists '${LUPUSMICHAELIS_DEV_USER_ALIAS}'@'localhost';
			grant all privileges on *.* to '${LUPUSMICHAELIS_DEV_USER_ALIAS}'@'localhost';
			SQL

			if [[ -v MYSQL_ROOT_PASSWORD && -n "$MYSQL_ROOT_PASSWORD" ]]
			then
				cat <<- SQL
				create user if not exists '${LUPUSMICHAELIS_DEV_USER_ALIAS}'@'%' identified by '${MYSQL_ROOT_PASSWORD}';
				grant all privileges on *.* to '${LUPUSMICHAELIS_DEV_USER_ALIAS}'@'%';
				SQL
			fi
		fi

		if [ -f $INIT_DIR/credentials ]
		then
			echo "-- credentials --"
			echo "use \`mysql\`;"
			echo

			local user
			local host
			local space
			local table
			local password
			while IFS=';' read -r user host space table password
			do
				if [ "$table" != '*' ]
				then
					table="`$table`"
				fi

				cat <<- SQL
				create user if not exists '${user}'@'${host}' identified by '${password}';
				grant all privileges on \`${space}\`.${table} to '${user}'@'${host}';
				SQL
			done < $INIT_DIR/credentials

			echo 'flush privileges;'
            echo
		fi
	} | tee "$sql_tmp" | mysql

	test $? -ne 0 && echo "Error on data populating"

	mysqladmin shutdown
	wait "$pid"
}

run()
{
	local mysqld_cmd=(
		gosu ${MYSQL_SYSUSER} mysqld_safe
			--datadir "${MYSQL_DATA_PATH}"
	)

	if (( $# > 0 )) && [[ "$1" != mysqld_safe ]]
	then
		${mysqld_cmd[@]} &
		exec "$@"
	else
		exec ${mysqld_cmd[@]}
	fi
}

init
run "$@"
