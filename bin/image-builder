#!/usr/bin/env bash

set -euo pipefail
shopt -s lastpipe

image-builder-debug-handle()
{
   [[ -v DEBUG  &&
       -n "$DEBUG" ]] &&
       image-builder-is-truish "$DEBUG" &&
       set -x ||
       set +x
}

# Test the value is truish from a C semantic perspective
image-builder-is-truish()
{
  local -r target="$1"
  case "$target" in
      0|no|false)
          false
          ;;
      1|yes|true)
          ;&
      *)
          true
  esac
}

image-builder-has-exe()
{
	local exe="$1"
	type "$exe" >& /dev/null
}

image-builder-debug-handle

declare -r bin_path=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
declare -r install_path=$(realpath "$bin_path/../")
declare -r command_name="$(basename $0)"
declare -r namespace=lupusmichaelis

COMPOSE_DOCKER_CLI_BUILD=1
DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD DOCKER_BUILDKIT

if image-builder-has-exe yq
then
	:
else
	yq()
	{
		docker run --rm -i -v "${PWD}":/workdir:ro mikefarah/yq "$@"
	}
fi

image-builder-docker-compose()
{
	docker compose -f builder.docker-compose.yml "$@"
}

image-builder-docker-sign()
{
	local -r name="$1"
	local -r version="$2"

	docker trust sign "$namespace/$name:$version"
}

image-builder-push-all()
{
	local -ar git_tag_list=$(git-tag)
	local git_tag_name
	local git_tag_version
	for tag in ${git_tag_list[@]}
	do
		printf '%b' "$tag" |
			awk -F '[/@]' -- '{ print $2 " " $3 }' |
			read git_tag_name git_tag_version
		docker push "$namespace/$git_tag_name:$git_tag_version"
	done
}

image-builder-push()
{
	local -r image_name="$1"
	local -r image_tag="$2"
	printf "Pushing image '%s' version '%s'\n" "$image_name" "$image_tag"
	docker push "$namespace/$image_name:$image_tag"
}

image-builder-list-services()
{
	image-builder-docker-compose config |
		yq e '.services | to_entries | .[].key' -
}

image-builder-push-latest()
{
	local -r image_name="$1"

	local image_tag
	local image_name
	local image_version
	local git_tag
	local git_revision

	cat builder.docker-compose.yml |
			yq e '.services.*.image' - |
			grep "$namespace/$image_name" |
			read image_tag

	printf '%b' "$image_tag" |
		awk -F '[/:]' -- '{ print $3 }' |
		read image_version

	git_tag="$namespace/$image_name@$image_version"
	if [ -z "$(git tag -l "$git_tag")" ]
	then
		git_revision=$(
			git blame builder.docker-compose.yml |
				grep "image: $image_tag" |
				awk '{print $1}'
		)

		if [ -z "$git_revision" ]
		then
			image-builder-error 42 "Cannot find tag '$git_tag' for image '$image_tag'"
		else
			git tag "$git_tag" "$git_revision"
		fi
	fi

	if [ -z "$(docker image ls -q "$image_tag")" ]
	then
		image-builder-make "$image_name" "$image_version"
	fi

	docker tag "$image_tag" "$namespace/$image_name:latest"
	docker push "$image_tag"
	docker push "$namespace/$image_name:latest"
}

image-builder-push-latest-all()
{
	local image_tag
	local image_name

	for image_tag in $(
		cat builder.docker-compose.yml |
			yq e '.services.*.image' - |
			grep "$namespace/"
	)
	do
		printf '%b' "$image_tag" |
			awk -F '[/:]' -- '{ print $2 }' |
			read image_name

		image-builder-push-latest "$image_name"
	done
}

image-builer-error()
{
	printf "%b\n" "$2"
	return "$1"
}

image-builder-make()
{
	local -r image_name="$1"
	local -r image_tag_name="$2"
	printf "Making image '%s' version '%s'\n" "$image_name" "$image_tag_name"
	#TODO compare image tag name to image name in builder file
	image-builder-docker-compose run --rm bootstrap "$image_name" "$image_tag_name"
}

image-builder-usage()
{
	local -r bold="[1m"
	local -r undecorate="[0m"
	local -r bold_command_name="$bold$command_name$undecorate"

	local usage
	readarray usage <<-	eos
	: $bold_command_name push [ image-name ] [ image-tag-name ]
	: 	TODO

	: $bold_command_name push-latest [ image-name ]
	: 	Attempts to determine the most recent image version based on builder compose file, marks it as latest
	: 	then push

	: $bold_command_name push-all
	: 	Get all Git tags and attempt to push corresponding image

	: $bold_command_name push-all-latest
	: 	Attempts to determine the most recent image version based on builder compose file, marks it as latest
	: 	then push, for all

	: $bold_command_name make-all
	: 	Build all tags of all images

	: $bold_command_name make [ image-name ] [ image-tag-name ]
	: 	Make a container image based on service name and a version name
	: 	Image tag example:	$namespace/alpine-panic:1.0.42
	: 	Git tag example:	$namespace/alpine-panic@1.0.42

	: $bold_command_name wip [ service-name ]
	: 	Build an image by service name with unclean work in progress file tree

	: $bold_command_name wip-run [ service-name ] [ docker-compose-run-arguments ]
	: 	Build an image and run an ephemeral container with provided arguments

	: $bold_command_name sign [ image-name ] [ image-tag-name ]
	: 	Sign an image

	: $bold_command_name list
	: 	List services to build

	: $bold_command_name bootstrap
	: 	Build the bootstrap image used to build other images
	eos
	typeset -r usage
	printf "%b" "${usage[@]#: }"

	return 42
}

image-builder-main()
{
	test -f "$install_path/.env" ||
		$install_path/bin/generate-docker-image-bulder-environment

	if (( $# < 1 ))
	then
		image-builder-usage
		return
	fi

	local -r action="$1"; shift
	case "$action" in
		bootstrap)
			image-builder-docker-compose build --progress=plain bootstrap
			;;
		wip)
			image-builder-docker-compose build "$@"
			;;
		wip-run)
			image-builder-docker-compose build "$1"
			image-builder-docker-compose run --rm "$@"
			;;
		list)
			image-builder-list-services
			;;
		push)
			image-builder-push "$@"
			;;
		push-latest)
			image-builder-push-latest "$@"
			;;
		push-all)
			image-builder-push-all
			;;
		push-all-latest)
			image-builder-push-latest-all
			;;
		sign)
			local -r image_name="$2"
			local -r image_tag_name="$3"
			printf "Signing image '%s' version '%s'\n" "$image_name" "$image_tag_name"
			image-builder-docker-sign "$image_name" "$image_tag_name"
			;;
		make)
			image-builder-make "$@"
			;;
		make-all)
			local -ar git_tag_list=$(git-tag)
			local git_tag_name
			local git_tag_version
			for tag in ${git_tag_list[@]}
			do
				printf '%b' "$tag" |
					awk -F '[/@]' -- '{ print $2 " " $3 }' |
					read git_tag_name git_tag_version
				"${BASH_SOURCE[0]}" make "$git_tag_name" "$git_tag_version"
			done
			;;
		*)
			image-builder-usage
	esac
}

git-tag()
{
	git for-each-ref --sort=taggerdate --format '%(refname)' refs/tags |
		while read tag
		do echo ${tag#refs/tags/}
		done |
			grep "$namespace/"
}

image-builder-main "$@"
